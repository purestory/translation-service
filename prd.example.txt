# 🌐 AI 기반 다중 엔진 번역 서비스

## 프로젝트 개요
본 프로젝트는 AI 기반의 다중 엔진 번역 서비스로, 다양한 번역 엔진을 통해 고품질의 번역 결과를 제공합니다.

## 주요 기능

### 1. 다중 번역 엔진 지원
- DeepL API
- OpenAI GPT API
- Google Gemini API
- Anthropic Claude API
- Groq API

### 2. 웹 인터페이스
- React + Vite 기반 프론트엔드
- 직관적인 사용자 인터페이스
- 실시간 번역 결과 확인
- API 키 설정 및 관리

### 3. 파일 번역 지원
- 텍스트 파일 번역
- SRT 자막 파일 번역
- 대용량 파일 청크 처리

### 4. 번역 엔진 선택
- 번역 API: DeepL, OpenAI GPT, Google Gemini, Anthropic Claude
- 언어별 최적화된 엔진 추천
- 비용 효율적 엔진 선택 가이드

## API 키 정보 (설정 필요)
- DeepL API: [YOUR_DEEPL_API_KEY]
- Gemini API: [YOUR_GEMINI_API_KEY]
- OpenAI API: [YOUR_OPENAI_API_KEY]
- Anthropic API: [YOUR_ANTHROPIC_API_KEY]
- Groq API: [YOUR_GROQ_API_KEY]

## 사용자 시나리오

### 시나리오 1: 웹사이트 콘텐츠 번역
- 사용자가 웹사이트의 한국어 콘텐츠를 영어로 번역
- 여러 번역 엔진 결과 비교
- 최적의 번역 선택 및 다운로드

### 시나리오 2: 자막 파일 번역
- SRT 자막 파일 업로드
- 한국어 → 영어 번역
- 타임스탬프 유지하여 번역된 자막 다운로드

## 기술적 요구사항

### 백엔드
- Node.js + Express
- 파일 업로드 처리
- API 키 관리
- 청크 단위 번역 처리
- 진행률 추적

### 프론트엔드
- React 18 + Vite
- TypeScript 지원
- Tailwind CSS
- 파일 드래그&드롭
- 실시간 진행률 표시

### 보안
- API 키 암호화 저장
- 파일 업로드 크기 제한
- CORS 설정
- 사용자 세션 관리

## 배포 환경
- 서버: Ubuntu 24.04 LTS
- 포트: 3501 (백엔드), 프론트엔드는 빌드되어 정적 파일로 서비스
- 프로세스 관리: systemd
- 웹서버: Nginx 프록시

## 설치 및 실행

### 1. 환경 설정
```bash
# backend/.env 파일 생성
PORT=3501
NODE_ENV=development
DEEPL_API_KEY=your_deepl_api_key
GEMINI_API_KEY=your_gemini_api_key
OPENAI_API_KEY=your_openai_api_key
ANTHROPIC_API_KEY=your_anthropic_api_key
GROQ_API_KEY=your_groq_api_key
```

### 2. 백엔드 실행
```bash
cd backend
npm install
npm start
```

### 3. 프론트엔드 빌드
```bash
cd vite-frontend
npm install
npm run build
```

## 주의사항
- 실제 API key는 backend/.env 파일에 설정
- prd.txt 파일은 개발용 문서로 실제 서비스에서는 사용하지 않음
- 모든 API key는 환경변수로 관리 